<style lang="less">
  // 2.0 这里写样式
  @import '../style/iconfont.less';
  page {
    background-color: #fff;
  }
  .divider {
    background-color: #f4f4f4;
  }
  .address {
    &-info {
      height: 222rpx;
      padding-bottom: 15rpx;
      box-sizing: border-box;
      position: relative;
      background-color: #fff;
      display: flex;
      flex-direction: column;
      align-content: center;
      justify-content: center;
      .item {
        padding: 22rpx 16rpx;
        display: flex;
        flex-wrap: wrap;
        font-size: 32rpx;
        line-height: 1.3;
        .col {
          display: flex;
          align-items: center;
        }
        .note {
          width: 160rpx;
        }
        .detail {
          max-width: 480rpx;
        }
        .address-phone {
          margin-right: 82rpx;
        }
        .icon-jiantouyou {
          position: absolute;
          right: 0;
        }
        .icon-jiantouyou:before {
          font-size: 24rpx;
          color: #999;
          line-height: 1;
          width: 15rpx;
          height: 25rpx;
        }
      }
    }
    &-border {
      width: 750rpx;
      height: 15rpx;
      position: absolute;
      bottom: 0;
      left: 0;
    }
    &-add {
      height: 222rpx;
      &-btn {
        width: 360rpx;
        height: 80rpx;
        background-color: #f4f4f4;
        border-radius: 5rpx;
        color: #ccc;
        font-size: 32rpx;
        display: flex;
        justify-content: center;
        align-items: center;
      }
    }
  }

  .product {
    &-item {
      display: flex;
      padding: 30rpx 20rpx;
      position: relative;
      &::after {
        content: '';
        position: absolute;
        left: 20rpx;
        right: 0;
        bottom: 0;
        border-bottom: 1rpx solid #ddd;
      }
    }
    &-left {
      margin-right: 26rpx;
      &,
      .product-img {
        width: 200rpx;
        height: 200rpx;
        background-color: #eee;
      }
    }
    &-right {
      width: 480rpx;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      position: relative;
    }
    &-name {
      height: 84rpx;
      font-size: 30rpx;
      line-height: 1.4;
      /* 多行文字隐藏省略号 */
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-box-orient: vertical;
      -webkit-line-clamp: 2;
    }
    &-price {
      color: #ff2d4a;
      &-symbol,
      &-decimal {
        font-size: 28rpx;
      }
      &-integer {
        font-size: 44rpx;
      }
    }
    &-count {
      position: absolute;
      right: 0;
      bottom: 0;
      letter-spacing: 2rpx;
      color: #999;
    }
  }

  .order {
    &-list {
      background-color: #fff;
    }
    &-total-item {
      height: 60rpx;
      background-color: #fff;
      padding: 0 20rpx;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
      &-right {
        color: #ff2d4a;
      }
    }
    &-cell {
      height: 88rpx;
      background-color: #fff;
      padding: 0 20rpx;
      display: flex;
      align-items: center;
      position: relative;
      justify-content: space-between;
      &::after {
        content: '';
        position: absolute;
        border-top: 1rpx solid #ddd;
        left: 20rpx;
        right: 20rpx;
        top: -1rpx;
      }
      .btn-line {
        border: 2rpx solid #999;
        border-radius: 5rpx;
        width: 156rpx;
        height: 56rpx;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-left: 40rpx;
      }
      .btn-color-main {
        color: #ff2d4a;
      }
    }
    &-pay {
      background-color: #fff;
      padding: 20rpx 20rpx 60rpx;
      font-size: 30rpx;
      text-align: right;
      &-head {
        margin-bottom: 20rpx;
      }
      &-total {
        color: #ff2d4a;
      }
      &-btn,
      .login-btn {
        background-color: #00c000;
        display: flex;
        height: 80rpx;
        justify-content: center;
        align-items: center;
        color: #fff;
        font-size: 30rpx;
        border-radius: 5rpx;
        margin-bottom: 20rpx;
        &.disabled {
          background-color: #ddd;
        }
      }
    }
  }
</style>
<template>
  <!-- 1.0 这里写结构 -->
  <Address :userAddress.sync="addressData">
    <view class="address-info">
      <block wx:if="{{ addressData }}">
        <view class="item space-between">
          <view class="col">
            <text class="note">收货人：</text>
            <text class="detail">{{addressData.userName}}</text>
          </view>
          <view class="col">
            <text class="address-phone">{{addressData.telNumber}}</text>
            <view class="iconfont-tap icon-jiantouyou"></view>
          </view>
        </view>
        <view class="item">
          <text class="note">收货地址：</text>
          <text class="detail">{{addressData.userAddressMerge}}</text>
        </view>
      </block>
      <block wx:else>
        <view class="address-add-btn">+ 新增地址</view>
      </block>
      <image class="address-border" src="/images/cart_border@2x.png" alt="" />
    </view>
  </Address>
  <view class="divider"></view>
  <view class="order-list">
    <block wx:for="{{ cartSelectDataArr }}" wx:key="index">
      <view class="product-item">
        <navigator url="/pages/goods_detail?goods_id={{ item.goods_id }}" class="product-left">
          <image class="product-img image-holder" src="{{ item.goods_small_logo }}" />
        </navigator>
        <view class="product-right">
          <navigator url="/pages/goods_detail?goods_id={{ item.goods_id }}" class="product-name">
           {{item.goods_name}}
          </navigator>
          <view class="product-price">
            <text class="product-price-symbol">￥</text>
            <text class="product-price-integer">{{ item.goods_price }}</text>
            <text class="product-price-decimal">.00</text>
          </view>
          <view class="product-count">x{{item.num}}</view>
        </view>
      </view>
    </block>
    <view class="order-cell">
      项目测试使用，支付成功后我们不会为您发货
    </view>
  </view>
  <view class="divider"></view>
  <view class="order-total">
    <view class="order-total-item">
      <view class="order-total-item-left">商品金额</view>
      <view class="order-total-item-right">￥{{totalPay}}</view>
    </view>
    <view class="order-total-item">
      <view class="order-total-item-left">运费</view>
      <view class="order-total-item-right">+￥0.00</view>
    </view>
  </view>
  <view class="order-pay">
    <view class="order-pay-head">实付金额：<text class="order-pay-total">￥0.01</text></view>
    <button open-type="getUserInfo" @getuserinfo="getUserInfoHandle" class="login-btn" wx:if='{{ !token }}'>点击登录后下单</button>
    <view class="order-pay-btn" @tap="orderPayHandle" wx:else >微信支付</view>
  </view>

</template>

<script>
  // 3.0 这里写JS
  import wepy from 'wepy'
  import Address from '../components/address'
  // 导入api接口
  import api from '../api/api.js'
  // 类名首字母大写
  export default class CartOrder extends wepy.page {
    // 4.0 这里写JSON配置项
    config = {
      navigationBarTitleText: '确认订单',
      backgroundColor: '#fff'
    }
    data = {
      addressData: null,
      cartDataArr: [],
      totalPay: 0,
      token: '',
      cartSelectDataArr: []
    }
    components = {
      Address
    }
    methods = {
      // 登录获取token
      getUserInfoHandle(event) {
        console.log(event)
        // 存储用户信息
        wepy.setStorageSync('user_info', event.detail)
        wepy.login().then(res => {
          console.log(res)
          let options = {
            encryptedData: event.detail.encryptedData,
            iv: event.detail.iv,
            rawData: event.detail.rawData,
            signature: event.detail.signature,
            code: res.code
          }
          // console.log(options)
          this.doWxLogin(options)
        })
      },
      // 微信支付
      orderPayHandle() {
        // 验证是否选择收获地址
        if (!this.addressData) {
          wepy.showToast({
            title: '请选择收货地址',
            icon: 'none',
            duration: 1000
          })
        } else {
          let orderSelectAll = []
          this.cartSelectDataArr.forEach(item => {
            let temObj = {
              goods_price: item.goods_price,
              goods_id: item.goods_id,
              goods_number: item.num
            }
            orderSelectAll.push(temObj)
          })
          // 创建发起请求的数据
          let options = {
            consignee_addr: this.addressData.userAddressMerge,
            order_price: this.totalPay,
            order_detail: JSON.stringify(this.cartSelectDataArr),
            goods: orderSelectAll
          }
          console.log(options)
          this.doPostMyOrdersCreate(options)
        }
      }
    }
    // 登录获取用户信息
    doWxLogin(options) {
      api.postUserWxLogin({
        method: 'POST',
        data: options
      }).then(res => {
        // console.log(res)
        if (res.meta.status === 200) {
          console.log('logined')
          wepy.setStorageSync('Token', res.data.token)
          this.token = res.data.token
          this.$apply()
        }
      })
    }
    // 发送创建订单函数
    doPostMyOrdersCreate(options) {
      api.postMyOrdersCreate({
        method: 'POST',
        data: options
      }).then(res => {
        if (res.meta.status === 200) {
          // console.log(res.data.order_number)
          this.doPostMyOrdersPay(res.data.order_number)
        }
      })
    }
    // 支付订单
    doPostMyOrdersPay(orderNumber) {
      api.postMyOrdersPay({
        method: 'POST',
        data: {
          order_number: orderNumber
        }}).then(res => {
          // console.log(res)
          if (res.meta.status === 200) {
          // console.log(res.data.order_number)
            let wxOrder = res.data.wxorder
            // console.log(wxOrder)
          // this.doPostMyOrdersPay(res.data.order_number)
            wepy.requestPayment(wxOrder).then(res => {
              console.log(res)
              api.postMyOrdersChkOrder({
                method: 'POST',
                data: {
                  order_number: orderNumber
                }
              }).then(res => {
                console.log(res)
                if (res.meta.status === 200) {
                  wepy.navigateTo({ url: '/pages/orders' })
                }
              })
            })
          }
        })
    }
    // 监听选择中的购物车数据,---注意这里使用监听,因为计算computed比onLoad触发还快
    watch = {
      cartDataArr() {
        this.cartDataArr.forEach(item => {
          // console.log(item)
          if (item.selectedStatus) {
            this.cartSelectDataArr.push(item)
          }
        })
        return this.cartDataArr
      }
    }
    onLoad(options) {
      console.log('onLoad')
      // console.log(options)
      // 获取从购物车页面传过来的总金额信息
      this.totalPay = options.totalPay
      this.cartDataArr = wepy.getStorageSync('key_cart') || []
      this.token = wepy.getStorageSync('Token') || ''
    }
  }
</script>
