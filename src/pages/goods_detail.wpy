<style lang="less">
@import '../style/goods-detail.less';
@import "../plugins/wxParse/wxParse.wxss";
</style>
<template>
<swiper
    class="swiper"
    indicator-dots="true"
    indicator-color="rgba(255,255,255,.5)"
    indicator-active-color="#ffffff"
    interval="2500"
    autoplay="true"
    circular="true"
  >
    <block
      wx:for='{{goodsDetail.pics}}'
      wx:key='{{index}}'
    >
      <swiper-item @tap='previewImg({{item.pics_big}})'>
        <image
          class="swiper-img"
          src="{{item.pics_big}}"
        />
      </swiper-item>
      </block>
      </swiper>
    <view class="product-info">
      <view class="product-head">
        <text class="price">{{goodsDetail.goods_price}}</text>
      </view>
      <view class="product-body">
        <view class="product-name">
          {{goodsDetail.goods_name}}
        </view>
        <view class="product-like">
          <view class="iconfont icon-shoucang"></view>
          <view>收藏</view>
        </view>
      </view>
      <view class="product-foot">
        快递：<text>免运费</text>
      </view>
    </view>
      <view class="part">
        <view class="part-item part-line">
          <text class="note">促销</text><text class="description color-main">满300减30元</text>
        </view>
        <view class="part-item">
          <text class="note">已选</text><text class="description">黑色/S/1件</text>
        </view>
      </view>
      <view class="part">
        <Address :userAddress.sync="addressData">
        <view class="part-item">
          <text class="note">送至</text><text class="description">{{addressData.userAddressMerge}}</text>
          <view class="iconfont icon-jiantouyou"></view>
        </view>
        </Address>
      </view>

       <view class="tabs">
        <view class="tabs-head">
          <view class="tabs-item {{ isActive? 'active' : '' }} " @tap="toggleTabs(1)">
            图文详情
          </view>
        <view class="tabs-item {{ !isActive? 'active' : '' }} " @tap="toggleTabs(2)">
          规格参数
        </view>
       </view>
    <view class="tabs-body">
  <view class="tabs-content" hidden="{{!isActive}}"
  >
    商品图文展示
    <import src="/plugins/wxParse/wxParse.wxml" />
    <!-- //这里data中article为bindName -->
    <template is="wxParse" data="{{wxParseData:article.nodes}}" />
  </view>
      <view class="tabs-content" hidden="{{isActive}}">
          <view class="param-item">
            <text class="note">商品名称</text>
            <text class="description">复古撞色运动外套男女情侣校服立领夹文字自动换行</text>
          </view>
          <view class="param-item">
            <text class="note">品牌</text>
            <text class="description">初语</text>
          </view>
          <view class="param-item">
            <text class="note">编号</text>
            <text class="description">BR1005</text>
          </view>
          <view class="param-item">
            <text class="note">颜色</text>
            <text class="description">黑色 / 白色 / 灰色</text>
          </view>
      </view>
    </view>
</view>
  <view class="fixed-bar">
    <view class="item">
      <button class='btn-kf' open-type='contact'>客服</button>
      <view class="iconfont icon-kefu"></view>
      <text class="item-note">联系客服</text>
    </view>
    <view class="item" @tap='goTopCartBar'>
      <view class="iconfont icon-gouwuche "></view>
      <text class="item-note">购物车</text>
    </view>
    <view class="btn-group">
      <view class="btn yellow-button" @tap='addCart'>加入购物车</view>
      <view class="btn red-button">立即购买</view>
    </view>
  </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import api from '../api/api'
import WxParse from '../plugins/wxParse/wxParse.js'
import Address from '../components/address'
export default class GoodsDetail extends wepy.page {
  config = {
    navigationBarTitleText: '商品详细'
  }
  data = {
    goodsDetail: null, // 一开始加载页面数据
    isActive: true, // tab切换标识
    cartDataArr: [], // 加入购物车数据
    addressData: null
  }
  components= {
    Address
  }
  methods = {
    // 实现图片预览
    previewImg(currentImg) {
      console.log(currentImg)
      let previewImageUrlsArr = []
      this.goodsDetail.pics.forEach(item => {
        previewImageUrlsArr.push(item.pics_big)
      })
        // console.log(previewImageUrlsArr)
      wepy.previewImage({
        current: currentImg, // 当前显示图片的http链接
        urls: previewImageUrlsArr // 需要预览的图片http链接列表
      })
    },
    // 切换tab栏
    toggleTabs(num) {
        // console.log(num)
        // num = num;
      +num === 1 ? (this.isActive =
         true) : (this.isActive = false)
    },
    // 点击购物车跳转
    goTopCartBar() {
      wepy.switchTab({
        url: '/pages/cart'
      })
    },
    // 处理警告信息
    wxParseImgLoad() {
    },
    // 增加到购物车
    addCart() {
      let keys = ['goods_id', 'goods_name', 'goods_price', 'goods_small_logo']
      let goodsCartInfo = {}
      keys.forEach(item => {
        goodsCartInfo[item] = this.goodsDetail[item]
      })
      // 获取本地存储数据
      this.cartDataArr = wepy.getStorageSync('key_cart') || []
      // 调用方法,得到返回值
      let currentIndex = this._goodsCheckInCartByGoodsId(goodsCartInfo.goods_id, this.cartDataArr)
      console.log(currentIndex)
      // 判断是否第一次添加,如果是的话为-1,否则为索引值
      if (currentIndex === -1) {
        goodsCartInfo.num = 1
        goodsCartInfo.selectedStatus = true
        this.cartDataArr.push(goodsCartInfo)
        // 设置本地存储
        wepy.setStorageSync('key_cart', this.cartDataArr)
        // 提示框
        wepy.showToast({
          title: '添加成功',
          icon: 'success',
          duration: 1000,
          mask: true
        })
      } else {
        // goodsCartInfo.num ++
        // 尝试一下用异步的做法
        this.cartDataArr[currentIndex].num ++// 更改购物车商品数量
        wepy.setStorageSync('key_cart', this.cartDataArr)
        // 提示
        wepy.showToast({
          title: '添加成功',
          icon: 'success',
          duration: 1000,
          mask: true
        })
      }
    }}
    // 定义判断点击加入购物车是第一次加还是数量增加
  _goodsCheckInCartByGoodsId(goodsId, cartDataArr) {
    var currentIndex = -1
    cartDataArr.forEach((item, index) => {
      if (item.goods_id === goodsId) {
        currentIndex = index
      }
    })
    return currentIndex
  }
  onLoad(options) {
    console.log('onLoad')
    // 请求数据
    api.getGoodsDetail({
      data: {
        goods_id: options.goods_id
      }
    }).then(res => {
      // console.log(res)
      this.goodsDetail = res.data
      // 利用富文本转换插件,把html标签变成wxml
      let detailsData = this.goodsDetail.goods_introduce
          /**
           * WxParse.wxParse(bindName , type, data, target,imagePadding)
           * 1.bindName绑定的数据名(必填)
           * 2.type可以为html或者md(必填)
           * 3.data为传入的具体数据(必填)
           * 4.target为Page对象,一般为this(必填)
           * 5.imagePadding为当图片自适应是左右的单一padding(默认为0,可选)
           */
      var that = this
      WxParse.wxParse('article', 'html', detailsData, that, 5)
      this.$apply()
    })
  }
  }
</script>
